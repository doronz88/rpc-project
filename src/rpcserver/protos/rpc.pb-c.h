/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: rpc.proto */

#ifndef PROTOBUF_C_rpc_2eproto__INCLUDED
#define PROTOBUF_C_rpc_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct Rpc__Command Rpc__Command;
typedef struct Rpc__Response Rpc__Response;
typedef struct Rpc__ReturnRegistersArm Rpc__ReturnRegistersArm;
typedef struct Rpc__Argument Rpc__Argument;
typedef struct Rpc__Handshake Rpc__Handshake;
typedef struct Rpc__ObjcClass Rpc__ObjcClass;
typedef struct Rpc__CmdShowObject Rpc__CmdShowObject;
typedef struct Rpc__ResponseShowObject Rpc__ResponseShowObject;
typedef struct Rpc__CmdShowClass Rpc__CmdShowClass;
typedef struct Rpc__ResponseShowClass Rpc__ResponseShowClass;
typedef struct Rpc__CmdExecChunk Rpc__CmdExecChunk;
typedef struct Rpc__ResponseCmdExecChunk Rpc__ResponseCmdExecChunk;
typedef struct Rpc__CmdDlopen Rpc__CmdDlopen;
typedef struct Rpc__ResponseDlopen Rpc__ResponseDlopen;
typedef struct Rpc__CmdDlclose Rpc__CmdDlclose;
typedef struct Rpc__ResponseDlclose Rpc__ResponseDlclose;
typedef struct Rpc__CmdDlsym Rpc__CmdDlsym;
typedef struct Rpc__ResponseDlsym Rpc__ResponseDlsym;
typedef struct Rpc__CmdExec Rpc__CmdExec;
typedef struct Rpc__ResponseCmdExec Rpc__ResponseCmdExec;
typedef struct Rpc__CmdCall Rpc__CmdCall;
typedef struct Rpc__ResponseCall Rpc__ResponseCall;
typedef struct Rpc__CmdPeek Rpc__CmdPeek;
typedef struct Rpc__ResponsePeek Rpc__ResponsePeek;
typedef struct Rpc__CmdPoke Rpc__CmdPoke;
typedef struct Rpc__ResponsePoke Rpc__ResponsePoke;
typedef struct Rpc__CmdListDir Rpc__CmdListDir;
typedef struct Rpc__CmdDummyBlock Rpc__CmdDummyBlock;
typedef struct Rpc__ResponseDummyBlock Rpc__ResponseDummyBlock;
typedef struct Rpc__CmdGetClassList Rpc__CmdGetClassList;
typedef struct Rpc__ResponseGetClassList Rpc__ResponseGetClassList;
typedef struct Rpc__ResponseError Rpc__ResponseError;
typedef struct Rpc__ResponseListdir Rpc__ResponseListdir;
typedef struct Rpc__DirEntry Rpc__DirEntry;
typedef struct Rpc__DirEntryStat Rpc__DirEntryStat;
typedef struct Rpc__CmdClose Rpc__CmdClose;


/* --- enums --- */

typedef enum _Rpc__Arch {
  RPC__ARCH__ARCH_UNKNOWN = 0,
  RPC__ARCH__ARCH_ARM64 = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(RPC__ARCH)
} Rpc__Arch;

/* --- messages --- */

typedef enum {
  RPC__COMMAND__TYPE__NOT_SET = 0,
  RPC__COMMAND__TYPE_EXEC = 2,
  RPC__COMMAND__TYPE_DLOPEN = 3,
  RPC__COMMAND__TYPE_DLCLOSE = 4,
  RPC__COMMAND__TYPE_DLSYM = 5,
  RPC__COMMAND__TYPE_CALL = 6,
  RPC__COMMAND__TYPE_PEEK = 7,
  RPC__COMMAND__TYPE_POKE = 8,
  RPC__COMMAND__TYPE_LIST_DIR = 9,
  RPC__COMMAND__TYPE_SHOW_OBJECT = 10,
  RPC__COMMAND__TYPE_SHOW_CLASS = 11,
  RPC__COMMAND__TYPE_DUMMY_BLOCK = 12,
  RPC__COMMAND__TYPE_CLOSE = 13,
  RPC__COMMAND__TYPE_CLASS_LIST = 14,
  RPC__COMMAND__TYPE_EXEC_CHUNK = 15
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(RPC__COMMAND__TYPE__CASE)
} Rpc__Command__TypeCase;

struct  Rpc__Command
{
  ProtobufCMessage base;
  int32_t magic;
  Rpc__Command__TypeCase type_case;
  union {
    Rpc__CmdExec *exec;
    Rpc__CmdDlopen *dlopen;
    Rpc__CmdDlclose *dlclose;
    Rpc__CmdDlsym *dlsym;
    Rpc__CmdCall *call;
    Rpc__CmdPeek *peek;
    Rpc__CmdPoke *poke;
    Rpc__CmdListDir *list_dir;
    Rpc__CmdShowObject *show_object;
    Rpc__CmdShowClass *show_class;
    Rpc__CmdDummyBlock *dummy_block;
    Rpc__CmdClose *close;
    Rpc__CmdGetClassList *class_list;
    Rpc__CmdExecChunk *exec_chunk;
  };
};
#define RPC__COMMAND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc__command__descriptor) \
, 0, RPC__COMMAND__TYPE__NOT_SET, {0} }


typedef enum {
  RPC__RESPONSE__TYPE__NOT_SET = 0,
  RPC__RESPONSE__TYPE_EXEC = 1,
  RPC__RESPONSE__TYPE_EXEC_CHUNK = 2,
  RPC__RESPONSE__TYPE_DLOPEN = 3,
  RPC__RESPONSE__TYPE_DLCLOSE = 4,
  RPC__RESPONSE__TYPE_DLSYM = 5,
  RPC__RESPONSE__TYPE_PEEK = 6,
  RPC__RESPONSE__TYPE_POKE = 7,
  RPC__RESPONSE__TYPE_CALL = 8,
  RPC__RESPONSE__TYPE_ERROR = 9,
  RPC__RESPONSE__TYPE_DUMMY_BLOCK = 10,
  RPC__RESPONSE__TYPE_SHOW_OBJECT = 11,
  RPC__RESPONSE__TYPE_CLASS_LIST = 12,
  RPC__RESPONSE__TYPE_SHOW_CLASS = 13,
  RPC__RESPONSE__TYPE_LIST_DIR = 14
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(RPC__RESPONSE__TYPE__CASE)
} Rpc__Response__TypeCase;

struct  Rpc__Response
{
  ProtobufCMessage base;
  Rpc__Response__TypeCase type_case;
  union {
    Rpc__ResponseCmdExec *exec;
    Rpc__ResponseCmdExecChunk *exec_chunk;
    Rpc__ResponseDlopen *dlopen;
    Rpc__ResponseDlclose *dlclose;
    Rpc__ResponseDlsym *dlsym;
    Rpc__ResponsePeek *peek;
    Rpc__ResponsePoke *poke;
    Rpc__ResponseCall *call;
    Rpc__ResponseError *error;
    Rpc__ResponseDummyBlock *dummy_block;
    Rpc__ResponseShowObject *show_object;
    Rpc__ResponseGetClassList *class_list;
    Rpc__ResponseShowClass *show_class;
    Rpc__ResponseListdir *list_dir;
  };
};
#define RPC__RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc__response__descriptor) \
, RPC__RESPONSE__TYPE__NOT_SET, {0} }


struct  Rpc__ReturnRegistersArm
{
  ProtobufCMessage base;
  uint64_t x0;
  uint64_t x1;
  uint64_t x2;
  uint64_t x3;
  uint64_t x4;
  uint64_t x5;
  uint64_t x6;
  uint64_t x7;
  double d0;
  double d1;
  double d2;
  double d3;
  double d4;
  double d5;
  double d6;
  double d7;
};
#define RPC__RETURN_REGISTERS_ARM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc__return_registers_arm__descriptor) \
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


typedef enum {
  RPC__ARGUMENT__TYPE__NOT_SET = 0,
  RPC__ARGUMENT__TYPE_V_INT = 1,
  RPC__ARGUMENT__TYPE_V_DOUBLE = 2,
  RPC__ARGUMENT__TYPE_V_STR = 3,
  RPC__ARGUMENT__TYPE_V_BYTES = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(RPC__ARGUMENT__TYPE__CASE)
} Rpc__Argument__TypeCase;

struct  Rpc__Argument
{
  ProtobufCMessage base;
  Rpc__Argument__TypeCase type_case;
  union {
    uint64_t v_int;
    double v_double;
    char *v_str;
    ProtobufCBinaryData v_bytes;
  };
};
#define RPC__ARGUMENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc__argument__descriptor) \
, RPC__ARGUMENT__TYPE__NOT_SET, {0} }


struct  Rpc__Handshake
{
  ProtobufCMessage base;
  uint32_t magic;
  Rpc__Arch arch;
  char *sysname;
  char *machine;
};
#define RPC__HANDSHAKE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc__handshake__descriptor) \
, 0, RPC__ARCH__ARCH_UNKNOWN, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  Rpc__ObjcClass
{
  ProtobufCMessage base;
  uint64_t address;
  char *name;
};
#define RPC__OBJC_CLASS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc__objc_class__descriptor) \
, 0, (char *)protobuf_c_empty_string }


struct  Rpc__CmdShowObject
{
  ProtobufCMessage base;
  uint64_t address;
};
#define RPC__CMD_SHOW_OBJECT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc__cmd_show_object__descriptor) \
, 0 }


struct  Rpc__ResponseShowObject
{
  ProtobufCMessage base;
  char *description;
};
#define RPC__RESPONSE_SHOW_OBJECT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc__response_show_object__descriptor) \
, (char *)protobuf_c_empty_string }


struct  Rpc__CmdShowClass
{
  ProtobufCMessage base;
  uint64_t address;
};
#define RPC__CMD_SHOW_CLASS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc__cmd_show_class__descriptor) \
, 0 }


struct  Rpc__ResponseShowClass
{
  ProtobufCMessage base;
  char *description;
};
#define RPC__RESPONSE_SHOW_CLASS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc__response_show_class__descriptor) \
, (char *)protobuf_c_empty_string }


struct  Rpc__CmdExecChunk
{
  ProtobufCMessage base;
  ProtobufCBinaryData buffer;
};
#define RPC__CMD_EXEC_CHUNK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc__cmd_exec_chunk__descriptor) \
, {0,NULL} }


typedef enum {
  RPC__RESPONSE_CMD_EXEC_CHUNK__TYPE__NOT_SET = 0,
  RPC__RESPONSE_CMD_EXEC_CHUNK__TYPE_BUFFER = 1,
  RPC__RESPONSE_CMD_EXEC_CHUNK__TYPE_EXIT_CODE = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(RPC__RESPONSE_CMD_EXEC_CHUNK__TYPE__CASE)
} Rpc__ResponseCmdExecChunk__TypeCase;

struct  Rpc__ResponseCmdExecChunk
{
  ProtobufCMessage base;
  Rpc__ResponseCmdExecChunk__TypeCase type_case;
  union {
    ProtobufCBinaryData buffer;
    uint32_t exit_code;
  };
};
#define RPC__RESPONSE_CMD_EXEC_CHUNK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc__response_cmd_exec_chunk__descriptor) \
, RPC__RESPONSE_CMD_EXEC_CHUNK__TYPE__NOT_SET, {0} }


struct  Rpc__CmdDlopen
{
  ProtobufCMessage base;
  char *filename;
  int32_t mode;
};
#define RPC__CMD_DLOPEN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc__cmd_dlopen__descriptor) \
, (char *)protobuf_c_empty_string, 0 }


struct  Rpc__ResponseDlopen
{
  ProtobufCMessage base;
  uint64_t handle;
};
#define RPC__RESPONSE_DLOPEN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc__response_dlopen__descriptor) \
, 0 }


struct  Rpc__CmdDlclose
{
  ProtobufCMessage base;
  uint64_t handle;
};
#define RPC__CMD_DLCLOSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc__cmd_dlclose__descriptor) \
, 0 }


struct  Rpc__ResponseDlclose
{
  ProtobufCMessage base;
  uint32_t res;
};
#define RPC__RESPONSE_DLCLOSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc__response_dlclose__descriptor) \
, 0 }


struct  Rpc__CmdDlsym
{
  ProtobufCMessage base;
  uint64_t handle;
  char *symbol_name;
};
#define RPC__CMD_DLSYM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc__cmd_dlsym__descriptor) \
, 0, (char *)protobuf_c_empty_string }


struct  Rpc__ResponseDlsym
{
  ProtobufCMessage base;
  uint64_t ptr;
};
#define RPC__RESPONSE_DLSYM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc__response_dlsym__descriptor) \
, 0 }


struct  Rpc__CmdExec
{
  ProtobufCMessage base;
  protobuf_c_boolean background;
  size_t n_argv;
  char **argv;
  size_t n_envp;
  char **envp;
};
#define RPC__CMD_EXEC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc__cmd_exec__descriptor) \
, 0, 0,NULL, 0,NULL }


struct  Rpc__ResponseCmdExec
{
  ProtobufCMessage base;
  uint32_t pid;
};
#define RPC__RESPONSE_CMD_EXEC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc__response_cmd_exec__descriptor) \
, 0 }


struct  Rpc__CmdCall
{
  ProtobufCMessage base;
  uint64_t address;
  uint64_t va_list_index;
  size_t n_argv;
  Rpc__Argument **argv;
};
#define RPC__CMD_CALL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc__cmd_call__descriptor) \
, 0, 0, 0,NULL }


typedef enum {
  RPC__RESPONSE_CALL__RETURN_VALUES__NOT_SET = 0,
  RPC__RESPONSE_CALL__RETURN_VALUES_ARM_REGISTERS = 1,
  RPC__RESPONSE_CALL__RETURN_VALUES_RETURN_VALUE = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(RPC__RESPONSE_CALL__RETURN_VALUES__CASE)
} Rpc__ResponseCall__ReturnValuesCase;

struct  Rpc__ResponseCall
{
  ProtobufCMessage base;
  Rpc__ResponseCall__ReturnValuesCase return_values_case;
  union {
    Rpc__ReturnRegistersArm *arm_registers;
    uint64_t return_value;
  };
};
#define RPC__RESPONSE_CALL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc__response_call__descriptor) \
, RPC__RESPONSE_CALL__RETURN_VALUES__NOT_SET, {0} }


struct  Rpc__CmdPeek
{
  ProtobufCMessage base;
  uint64_t address;
  uint64_t size;
};
#define RPC__CMD_PEEK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc__cmd_peek__descriptor) \
, 0, 0 }


struct  Rpc__ResponsePeek
{
  ProtobufCMessage base;
  ProtobufCBinaryData data;
};
#define RPC__RESPONSE_PEEK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc__response_peek__descriptor) \
, {0,NULL} }


struct  Rpc__CmdPoke
{
  ProtobufCMessage base;
  uint64_t address;
  ProtobufCBinaryData data;
};
#define RPC__CMD_POKE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc__cmd_poke__descriptor) \
, 0, {0,NULL} }


struct  Rpc__ResponsePoke
{
  ProtobufCMessage base;
  uint64_t result;
};
#define RPC__RESPONSE_POKE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc__response_poke__descriptor) \
, 0 }


struct  Rpc__CmdListDir
{
  ProtobufCMessage base;
  char *path;
};
#define RPC__CMD_LIST_DIR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc__cmd_list_dir__descriptor) \
, (char *)protobuf_c_empty_string }


struct  Rpc__CmdDummyBlock
{
  ProtobufCMessage base;
};
#define RPC__CMD_DUMMY_BLOCK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc__cmd_dummy_block__descriptor) \
 }


struct  Rpc__ResponseDummyBlock
{
  ProtobufCMessage base;
  uint64_t address;
  uint64_t size;
};
#define RPC__RESPONSE_DUMMY_BLOCK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc__response_dummy_block__descriptor) \
, 0, 0 }


struct  Rpc__CmdGetClassList
{
  ProtobufCMessage base;
};
#define RPC__CMD_GET_CLASS_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc__cmd_get_class_list__descriptor) \
 }


struct  Rpc__ResponseGetClassList
{
  ProtobufCMessage base;
  size_t n_classes;
  Rpc__ObjcClass **classes;
};
#define RPC__RESPONSE_GET_CLASS_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc__response_get_class_list__descriptor) \
, 0,NULL }


struct  Rpc__ResponseError
{
  ProtobufCMessage base;
  char *func_name;
};
#define RPC__RESPONSE_ERROR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc__response_error__descriptor) \
, (char *)protobuf_c_empty_string }


struct  Rpc__ResponseListdir
{
  ProtobufCMessage base;
  uint64_t magic;
  uint64_t dirp;
  size_t n_dir_entries;
  Rpc__DirEntry **dir_entries;
};
#define RPC__RESPONSE_LISTDIR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc__response_listdir__descriptor) \
, 0, 0, 0,NULL }


struct  Rpc__DirEntry
{
  ProtobufCMessage base;
  uint64_t d_type;
  char *d_name;
  Rpc__DirEntryStat *lstat;
  Rpc__DirEntryStat *stat;
};
#define RPC__DIR_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc__dir_entry__descriptor) \
, 0, (char *)protobuf_c_empty_string, NULL, NULL }


struct  Rpc__DirEntryStat
{
  ProtobufCMessage base;
  uint64_t errno1;
  uint64_t st_dev;
  uint64_t st_mode;
  uint64_t st_nlink;
  uint64_t st_ino;
  uint64_t st_uid;
  uint64_t st_gid;
  uint64_t st_rdev;
  uint64_t st_size;
  uint64_t st_blocks;
  uint64_t st_blksize;
  uint64_t st_atime1;
  uint64_t st_mtime1;
  uint64_t st_ctime1;
};
#define RPC__DIR_ENTRY_STAT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc__dir_entry_stat__descriptor) \
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  Rpc__CmdClose
{
  ProtobufCMessage base;
};
#define RPC__CMD_CLOSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc__cmd_close__descriptor) \
 }


/* Rpc__Command methods */
void   rpc__command__init
                     (Rpc__Command         *message);
size_t rpc__command__get_packed_size
                     (const Rpc__Command   *message);
size_t rpc__command__pack
                     (const Rpc__Command   *message,
                      uint8_t             *out);
size_t rpc__command__pack_to_buffer
                     (const Rpc__Command   *message,
                      ProtobufCBuffer     *buffer);
Rpc__Command *
       rpc__command__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc__command__free_unpacked
                     (Rpc__Command *message,
                      ProtobufCAllocator *allocator);
/* Rpc__Response methods */
void   rpc__response__init
                     (Rpc__Response         *message);
size_t rpc__response__get_packed_size
                     (const Rpc__Response   *message);
size_t rpc__response__pack
                     (const Rpc__Response   *message,
                      uint8_t             *out);
size_t rpc__response__pack_to_buffer
                     (const Rpc__Response   *message,
                      ProtobufCBuffer     *buffer);
Rpc__Response *
       rpc__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc__response__free_unpacked
                     (Rpc__Response *message,
                      ProtobufCAllocator *allocator);
/* Rpc__ReturnRegistersArm methods */
void   rpc__return_registers_arm__init
                     (Rpc__ReturnRegistersArm         *message);
size_t rpc__return_registers_arm__get_packed_size
                     (const Rpc__ReturnRegistersArm   *message);
size_t rpc__return_registers_arm__pack
                     (const Rpc__ReturnRegistersArm   *message,
                      uint8_t             *out);
size_t rpc__return_registers_arm__pack_to_buffer
                     (const Rpc__ReturnRegistersArm   *message,
                      ProtobufCBuffer     *buffer);
Rpc__ReturnRegistersArm *
       rpc__return_registers_arm__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc__return_registers_arm__free_unpacked
                     (Rpc__ReturnRegistersArm *message,
                      ProtobufCAllocator *allocator);
/* Rpc__Argument methods */
void   rpc__argument__init
                     (Rpc__Argument         *message);
size_t rpc__argument__get_packed_size
                     (const Rpc__Argument   *message);
size_t rpc__argument__pack
                     (const Rpc__Argument   *message,
                      uint8_t             *out);
size_t rpc__argument__pack_to_buffer
                     (const Rpc__Argument   *message,
                      ProtobufCBuffer     *buffer);
Rpc__Argument *
       rpc__argument__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc__argument__free_unpacked
                     (Rpc__Argument *message,
                      ProtobufCAllocator *allocator);
/* Rpc__Handshake methods */
void   rpc__handshake__init
                     (Rpc__Handshake         *message);
size_t rpc__handshake__get_packed_size
                     (const Rpc__Handshake   *message);
size_t rpc__handshake__pack
                     (const Rpc__Handshake   *message,
                      uint8_t             *out);
size_t rpc__handshake__pack_to_buffer
                     (const Rpc__Handshake   *message,
                      ProtobufCBuffer     *buffer);
Rpc__Handshake *
       rpc__handshake__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc__handshake__free_unpacked
                     (Rpc__Handshake *message,
                      ProtobufCAllocator *allocator);
/* Rpc__ObjcClass methods */
void   rpc__objc_class__init
                     (Rpc__ObjcClass         *message);
size_t rpc__objc_class__get_packed_size
                     (const Rpc__ObjcClass   *message);
size_t rpc__objc_class__pack
                     (const Rpc__ObjcClass   *message,
                      uint8_t             *out);
size_t rpc__objc_class__pack_to_buffer
                     (const Rpc__ObjcClass   *message,
                      ProtobufCBuffer     *buffer);
Rpc__ObjcClass *
       rpc__objc_class__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc__objc_class__free_unpacked
                     (Rpc__ObjcClass *message,
                      ProtobufCAllocator *allocator);
/* Rpc__CmdShowObject methods */
void   rpc__cmd_show_object__init
                     (Rpc__CmdShowObject         *message);
size_t rpc__cmd_show_object__get_packed_size
                     (const Rpc__CmdShowObject   *message);
size_t rpc__cmd_show_object__pack
                     (const Rpc__CmdShowObject   *message,
                      uint8_t             *out);
size_t rpc__cmd_show_object__pack_to_buffer
                     (const Rpc__CmdShowObject   *message,
                      ProtobufCBuffer     *buffer);
Rpc__CmdShowObject *
       rpc__cmd_show_object__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc__cmd_show_object__free_unpacked
                     (Rpc__CmdShowObject *message,
                      ProtobufCAllocator *allocator);
/* Rpc__ResponseShowObject methods */
void   rpc__response_show_object__init
                     (Rpc__ResponseShowObject         *message);
size_t rpc__response_show_object__get_packed_size
                     (const Rpc__ResponseShowObject   *message);
size_t rpc__response_show_object__pack
                     (const Rpc__ResponseShowObject   *message,
                      uint8_t             *out);
size_t rpc__response_show_object__pack_to_buffer
                     (const Rpc__ResponseShowObject   *message,
                      ProtobufCBuffer     *buffer);
Rpc__ResponseShowObject *
       rpc__response_show_object__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc__response_show_object__free_unpacked
                     (Rpc__ResponseShowObject *message,
                      ProtobufCAllocator *allocator);
/* Rpc__CmdShowClass methods */
void   rpc__cmd_show_class__init
                     (Rpc__CmdShowClass         *message);
size_t rpc__cmd_show_class__get_packed_size
                     (const Rpc__CmdShowClass   *message);
size_t rpc__cmd_show_class__pack
                     (const Rpc__CmdShowClass   *message,
                      uint8_t             *out);
size_t rpc__cmd_show_class__pack_to_buffer
                     (const Rpc__CmdShowClass   *message,
                      ProtobufCBuffer     *buffer);
Rpc__CmdShowClass *
       rpc__cmd_show_class__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc__cmd_show_class__free_unpacked
                     (Rpc__CmdShowClass *message,
                      ProtobufCAllocator *allocator);
/* Rpc__ResponseShowClass methods */
void   rpc__response_show_class__init
                     (Rpc__ResponseShowClass         *message);
size_t rpc__response_show_class__get_packed_size
                     (const Rpc__ResponseShowClass   *message);
size_t rpc__response_show_class__pack
                     (const Rpc__ResponseShowClass   *message,
                      uint8_t             *out);
size_t rpc__response_show_class__pack_to_buffer
                     (const Rpc__ResponseShowClass   *message,
                      ProtobufCBuffer     *buffer);
Rpc__ResponseShowClass *
       rpc__response_show_class__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc__response_show_class__free_unpacked
                     (Rpc__ResponseShowClass *message,
                      ProtobufCAllocator *allocator);
/* Rpc__CmdExecChunk methods */
void   rpc__cmd_exec_chunk__init
                     (Rpc__CmdExecChunk         *message);
size_t rpc__cmd_exec_chunk__get_packed_size
                     (const Rpc__CmdExecChunk   *message);
size_t rpc__cmd_exec_chunk__pack
                     (const Rpc__CmdExecChunk   *message,
                      uint8_t             *out);
size_t rpc__cmd_exec_chunk__pack_to_buffer
                     (const Rpc__CmdExecChunk   *message,
                      ProtobufCBuffer     *buffer);
Rpc__CmdExecChunk *
       rpc__cmd_exec_chunk__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc__cmd_exec_chunk__free_unpacked
                     (Rpc__CmdExecChunk *message,
                      ProtobufCAllocator *allocator);
/* Rpc__ResponseCmdExecChunk methods */
void   rpc__response_cmd_exec_chunk__init
                     (Rpc__ResponseCmdExecChunk         *message);
size_t rpc__response_cmd_exec_chunk__get_packed_size
                     (const Rpc__ResponseCmdExecChunk   *message);
size_t rpc__response_cmd_exec_chunk__pack
                     (const Rpc__ResponseCmdExecChunk   *message,
                      uint8_t             *out);
size_t rpc__response_cmd_exec_chunk__pack_to_buffer
                     (const Rpc__ResponseCmdExecChunk   *message,
                      ProtobufCBuffer     *buffer);
Rpc__ResponseCmdExecChunk *
       rpc__response_cmd_exec_chunk__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc__response_cmd_exec_chunk__free_unpacked
                     (Rpc__ResponseCmdExecChunk *message,
                      ProtobufCAllocator *allocator);
/* Rpc__CmdDlopen methods */
void   rpc__cmd_dlopen__init
                     (Rpc__CmdDlopen         *message);
size_t rpc__cmd_dlopen__get_packed_size
                     (const Rpc__CmdDlopen   *message);
size_t rpc__cmd_dlopen__pack
                     (const Rpc__CmdDlopen   *message,
                      uint8_t             *out);
size_t rpc__cmd_dlopen__pack_to_buffer
                     (const Rpc__CmdDlopen   *message,
                      ProtobufCBuffer     *buffer);
Rpc__CmdDlopen *
       rpc__cmd_dlopen__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc__cmd_dlopen__free_unpacked
                     (Rpc__CmdDlopen *message,
                      ProtobufCAllocator *allocator);
/* Rpc__ResponseDlopen methods */
void   rpc__response_dlopen__init
                     (Rpc__ResponseDlopen         *message);
size_t rpc__response_dlopen__get_packed_size
                     (const Rpc__ResponseDlopen   *message);
size_t rpc__response_dlopen__pack
                     (const Rpc__ResponseDlopen   *message,
                      uint8_t             *out);
size_t rpc__response_dlopen__pack_to_buffer
                     (const Rpc__ResponseDlopen   *message,
                      ProtobufCBuffer     *buffer);
Rpc__ResponseDlopen *
       rpc__response_dlopen__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc__response_dlopen__free_unpacked
                     (Rpc__ResponseDlopen *message,
                      ProtobufCAllocator *allocator);
/* Rpc__CmdDlclose methods */
void   rpc__cmd_dlclose__init
                     (Rpc__CmdDlclose         *message);
size_t rpc__cmd_dlclose__get_packed_size
                     (const Rpc__CmdDlclose   *message);
size_t rpc__cmd_dlclose__pack
                     (const Rpc__CmdDlclose   *message,
                      uint8_t             *out);
size_t rpc__cmd_dlclose__pack_to_buffer
                     (const Rpc__CmdDlclose   *message,
                      ProtobufCBuffer     *buffer);
Rpc__CmdDlclose *
       rpc__cmd_dlclose__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc__cmd_dlclose__free_unpacked
                     (Rpc__CmdDlclose *message,
                      ProtobufCAllocator *allocator);
/* Rpc__ResponseDlclose methods */
void   rpc__response_dlclose__init
                     (Rpc__ResponseDlclose         *message);
size_t rpc__response_dlclose__get_packed_size
                     (const Rpc__ResponseDlclose   *message);
size_t rpc__response_dlclose__pack
                     (const Rpc__ResponseDlclose   *message,
                      uint8_t             *out);
size_t rpc__response_dlclose__pack_to_buffer
                     (const Rpc__ResponseDlclose   *message,
                      ProtobufCBuffer     *buffer);
Rpc__ResponseDlclose *
       rpc__response_dlclose__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc__response_dlclose__free_unpacked
                     (Rpc__ResponseDlclose *message,
                      ProtobufCAllocator *allocator);
/* Rpc__CmdDlsym methods */
void   rpc__cmd_dlsym__init
                     (Rpc__CmdDlsym         *message);
size_t rpc__cmd_dlsym__get_packed_size
                     (const Rpc__CmdDlsym   *message);
size_t rpc__cmd_dlsym__pack
                     (const Rpc__CmdDlsym   *message,
                      uint8_t             *out);
size_t rpc__cmd_dlsym__pack_to_buffer
                     (const Rpc__CmdDlsym   *message,
                      ProtobufCBuffer     *buffer);
Rpc__CmdDlsym *
       rpc__cmd_dlsym__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc__cmd_dlsym__free_unpacked
                     (Rpc__CmdDlsym *message,
                      ProtobufCAllocator *allocator);
/* Rpc__ResponseDlsym methods */
void   rpc__response_dlsym__init
                     (Rpc__ResponseDlsym         *message);
size_t rpc__response_dlsym__get_packed_size
                     (const Rpc__ResponseDlsym   *message);
size_t rpc__response_dlsym__pack
                     (const Rpc__ResponseDlsym   *message,
                      uint8_t             *out);
size_t rpc__response_dlsym__pack_to_buffer
                     (const Rpc__ResponseDlsym   *message,
                      ProtobufCBuffer     *buffer);
Rpc__ResponseDlsym *
       rpc__response_dlsym__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc__response_dlsym__free_unpacked
                     (Rpc__ResponseDlsym *message,
                      ProtobufCAllocator *allocator);
/* Rpc__CmdExec methods */
void   rpc__cmd_exec__init
                     (Rpc__CmdExec         *message);
size_t rpc__cmd_exec__get_packed_size
                     (const Rpc__CmdExec   *message);
size_t rpc__cmd_exec__pack
                     (const Rpc__CmdExec   *message,
                      uint8_t             *out);
size_t rpc__cmd_exec__pack_to_buffer
                     (const Rpc__CmdExec   *message,
                      ProtobufCBuffer     *buffer);
Rpc__CmdExec *
       rpc__cmd_exec__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc__cmd_exec__free_unpacked
                     (Rpc__CmdExec *message,
                      ProtobufCAllocator *allocator);
/* Rpc__ResponseCmdExec methods */
void   rpc__response_cmd_exec__init
                     (Rpc__ResponseCmdExec         *message);
size_t rpc__response_cmd_exec__get_packed_size
                     (const Rpc__ResponseCmdExec   *message);
size_t rpc__response_cmd_exec__pack
                     (const Rpc__ResponseCmdExec   *message,
                      uint8_t             *out);
size_t rpc__response_cmd_exec__pack_to_buffer
                     (const Rpc__ResponseCmdExec   *message,
                      ProtobufCBuffer     *buffer);
Rpc__ResponseCmdExec *
       rpc__response_cmd_exec__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc__response_cmd_exec__free_unpacked
                     (Rpc__ResponseCmdExec *message,
                      ProtobufCAllocator *allocator);
/* Rpc__CmdCall methods */
void   rpc__cmd_call__init
                     (Rpc__CmdCall         *message);
size_t rpc__cmd_call__get_packed_size
                     (const Rpc__CmdCall   *message);
size_t rpc__cmd_call__pack
                     (const Rpc__CmdCall   *message,
                      uint8_t             *out);
size_t rpc__cmd_call__pack_to_buffer
                     (const Rpc__CmdCall   *message,
                      ProtobufCBuffer     *buffer);
Rpc__CmdCall *
       rpc__cmd_call__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc__cmd_call__free_unpacked
                     (Rpc__CmdCall *message,
                      ProtobufCAllocator *allocator);
/* Rpc__ResponseCall methods */
void   rpc__response_call__init
                     (Rpc__ResponseCall         *message);
size_t rpc__response_call__get_packed_size
                     (const Rpc__ResponseCall   *message);
size_t rpc__response_call__pack
                     (const Rpc__ResponseCall   *message,
                      uint8_t             *out);
size_t rpc__response_call__pack_to_buffer
                     (const Rpc__ResponseCall   *message,
                      ProtobufCBuffer     *buffer);
Rpc__ResponseCall *
       rpc__response_call__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc__response_call__free_unpacked
                     (Rpc__ResponseCall *message,
                      ProtobufCAllocator *allocator);
/* Rpc__CmdPeek methods */
void   rpc__cmd_peek__init
                     (Rpc__CmdPeek         *message);
size_t rpc__cmd_peek__get_packed_size
                     (const Rpc__CmdPeek   *message);
size_t rpc__cmd_peek__pack
                     (const Rpc__CmdPeek   *message,
                      uint8_t             *out);
size_t rpc__cmd_peek__pack_to_buffer
                     (const Rpc__CmdPeek   *message,
                      ProtobufCBuffer     *buffer);
Rpc__CmdPeek *
       rpc__cmd_peek__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc__cmd_peek__free_unpacked
                     (Rpc__CmdPeek *message,
                      ProtobufCAllocator *allocator);
/* Rpc__ResponsePeek methods */
void   rpc__response_peek__init
                     (Rpc__ResponsePeek         *message);
size_t rpc__response_peek__get_packed_size
                     (const Rpc__ResponsePeek   *message);
size_t rpc__response_peek__pack
                     (const Rpc__ResponsePeek   *message,
                      uint8_t             *out);
size_t rpc__response_peek__pack_to_buffer
                     (const Rpc__ResponsePeek   *message,
                      ProtobufCBuffer     *buffer);
Rpc__ResponsePeek *
       rpc__response_peek__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc__response_peek__free_unpacked
                     (Rpc__ResponsePeek *message,
                      ProtobufCAllocator *allocator);
/* Rpc__CmdPoke methods */
void   rpc__cmd_poke__init
                     (Rpc__CmdPoke         *message);
size_t rpc__cmd_poke__get_packed_size
                     (const Rpc__CmdPoke   *message);
size_t rpc__cmd_poke__pack
                     (const Rpc__CmdPoke   *message,
                      uint8_t             *out);
size_t rpc__cmd_poke__pack_to_buffer
                     (const Rpc__CmdPoke   *message,
                      ProtobufCBuffer     *buffer);
Rpc__CmdPoke *
       rpc__cmd_poke__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc__cmd_poke__free_unpacked
                     (Rpc__CmdPoke *message,
                      ProtobufCAllocator *allocator);
/* Rpc__ResponsePoke methods */
void   rpc__response_poke__init
                     (Rpc__ResponsePoke         *message);
size_t rpc__response_poke__get_packed_size
                     (const Rpc__ResponsePoke   *message);
size_t rpc__response_poke__pack
                     (const Rpc__ResponsePoke   *message,
                      uint8_t             *out);
size_t rpc__response_poke__pack_to_buffer
                     (const Rpc__ResponsePoke   *message,
                      ProtobufCBuffer     *buffer);
Rpc__ResponsePoke *
       rpc__response_poke__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc__response_poke__free_unpacked
                     (Rpc__ResponsePoke *message,
                      ProtobufCAllocator *allocator);
/* Rpc__CmdListDir methods */
void   rpc__cmd_list_dir__init
                     (Rpc__CmdListDir         *message);
size_t rpc__cmd_list_dir__get_packed_size
                     (const Rpc__CmdListDir   *message);
size_t rpc__cmd_list_dir__pack
                     (const Rpc__CmdListDir   *message,
                      uint8_t             *out);
size_t rpc__cmd_list_dir__pack_to_buffer
                     (const Rpc__CmdListDir   *message,
                      ProtobufCBuffer     *buffer);
Rpc__CmdListDir *
       rpc__cmd_list_dir__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc__cmd_list_dir__free_unpacked
                     (Rpc__CmdListDir *message,
                      ProtobufCAllocator *allocator);
/* Rpc__CmdDummyBlock methods */
void   rpc__cmd_dummy_block__init
                     (Rpc__CmdDummyBlock         *message);
size_t rpc__cmd_dummy_block__get_packed_size
                     (const Rpc__CmdDummyBlock   *message);
size_t rpc__cmd_dummy_block__pack
                     (const Rpc__CmdDummyBlock   *message,
                      uint8_t             *out);
size_t rpc__cmd_dummy_block__pack_to_buffer
                     (const Rpc__CmdDummyBlock   *message,
                      ProtobufCBuffer     *buffer);
Rpc__CmdDummyBlock *
       rpc__cmd_dummy_block__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc__cmd_dummy_block__free_unpacked
                     (Rpc__CmdDummyBlock *message,
                      ProtobufCAllocator *allocator);
/* Rpc__ResponseDummyBlock methods */
void   rpc__response_dummy_block__init
                     (Rpc__ResponseDummyBlock         *message);
size_t rpc__response_dummy_block__get_packed_size
                     (const Rpc__ResponseDummyBlock   *message);
size_t rpc__response_dummy_block__pack
                     (const Rpc__ResponseDummyBlock   *message,
                      uint8_t             *out);
size_t rpc__response_dummy_block__pack_to_buffer
                     (const Rpc__ResponseDummyBlock   *message,
                      ProtobufCBuffer     *buffer);
Rpc__ResponseDummyBlock *
       rpc__response_dummy_block__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc__response_dummy_block__free_unpacked
                     (Rpc__ResponseDummyBlock *message,
                      ProtobufCAllocator *allocator);
/* Rpc__CmdGetClassList methods */
void   rpc__cmd_get_class_list__init
                     (Rpc__CmdGetClassList         *message);
size_t rpc__cmd_get_class_list__get_packed_size
                     (const Rpc__CmdGetClassList   *message);
size_t rpc__cmd_get_class_list__pack
                     (const Rpc__CmdGetClassList   *message,
                      uint8_t             *out);
size_t rpc__cmd_get_class_list__pack_to_buffer
                     (const Rpc__CmdGetClassList   *message,
                      ProtobufCBuffer     *buffer);
Rpc__CmdGetClassList *
       rpc__cmd_get_class_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc__cmd_get_class_list__free_unpacked
                     (Rpc__CmdGetClassList *message,
                      ProtobufCAllocator *allocator);
/* Rpc__ResponseGetClassList methods */
void   rpc__response_get_class_list__init
                     (Rpc__ResponseGetClassList         *message);
size_t rpc__response_get_class_list__get_packed_size
                     (const Rpc__ResponseGetClassList   *message);
size_t rpc__response_get_class_list__pack
                     (const Rpc__ResponseGetClassList   *message,
                      uint8_t             *out);
size_t rpc__response_get_class_list__pack_to_buffer
                     (const Rpc__ResponseGetClassList   *message,
                      ProtobufCBuffer     *buffer);
Rpc__ResponseGetClassList *
       rpc__response_get_class_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc__response_get_class_list__free_unpacked
                     (Rpc__ResponseGetClassList *message,
                      ProtobufCAllocator *allocator);
/* Rpc__ResponseError methods */
void   rpc__response_error__init
                     (Rpc__ResponseError         *message);
size_t rpc__response_error__get_packed_size
                     (const Rpc__ResponseError   *message);
size_t rpc__response_error__pack
                     (const Rpc__ResponseError   *message,
                      uint8_t             *out);
size_t rpc__response_error__pack_to_buffer
                     (const Rpc__ResponseError   *message,
                      ProtobufCBuffer     *buffer);
Rpc__ResponseError *
       rpc__response_error__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc__response_error__free_unpacked
                     (Rpc__ResponseError *message,
                      ProtobufCAllocator *allocator);
/* Rpc__ResponseListdir methods */
void   rpc__response_listdir__init
                     (Rpc__ResponseListdir         *message);
size_t rpc__response_listdir__get_packed_size
                     (const Rpc__ResponseListdir   *message);
size_t rpc__response_listdir__pack
                     (const Rpc__ResponseListdir   *message,
                      uint8_t             *out);
size_t rpc__response_listdir__pack_to_buffer
                     (const Rpc__ResponseListdir   *message,
                      ProtobufCBuffer     *buffer);
Rpc__ResponseListdir *
       rpc__response_listdir__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc__response_listdir__free_unpacked
                     (Rpc__ResponseListdir *message,
                      ProtobufCAllocator *allocator);
/* Rpc__DirEntry methods */
void   rpc__dir_entry__init
                     (Rpc__DirEntry         *message);
size_t rpc__dir_entry__get_packed_size
                     (const Rpc__DirEntry   *message);
size_t rpc__dir_entry__pack
                     (const Rpc__DirEntry   *message,
                      uint8_t             *out);
size_t rpc__dir_entry__pack_to_buffer
                     (const Rpc__DirEntry   *message,
                      ProtobufCBuffer     *buffer);
Rpc__DirEntry *
       rpc__dir_entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc__dir_entry__free_unpacked
                     (Rpc__DirEntry *message,
                      ProtobufCAllocator *allocator);
/* Rpc__DirEntryStat methods */
void   rpc__dir_entry_stat__init
                     (Rpc__DirEntryStat         *message);
size_t rpc__dir_entry_stat__get_packed_size
                     (const Rpc__DirEntryStat   *message);
size_t rpc__dir_entry_stat__pack
                     (const Rpc__DirEntryStat   *message,
                      uint8_t             *out);
size_t rpc__dir_entry_stat__pack_to_buffer
                     (const Rpc__DirEntryStat   *message,
                      ProtobufCBuffer     *buffer);
Rpc__DirEntryStat *
       rpc__dir_entry_stat__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc__dir_entry_stat__free_unpacked
                     (Rpc__DirEntryStat *message,
                      ProtobufCAllocator *allocator);
/* Rpc__CmdClose methods */
void   rpc__cmd_close__init
                     (Rpc__CmdClose         *message);
size_t rpc__cmd_close__get_packed_size
                     (const Rpc__CmdClose   *message);
size_t rpc__cmd_close__pack
                     (const Rpc__CmdClose   *message,
                      uint8_t             *out);
size_t rpc__cmd_close__pack_to_buffer
                     (const Rpc__CmdClose   *message,
                      ProtobufCBuffer     *buffer);
Rpc__CmdClose *
       rpc__cmd_close__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc__cmd_close__free_unpacked
                     (Rpc__CmdClose *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Rpc__Command_Closure)
                 (const Rpc__Command *message,
                  void *closure_data);
typedef void (*Rpc__Response_Closure)
                 (const Rpc__Response *message,
                  void *closure_data);
typedef void (*Rpc__ReturnRegistersArm_Closure)
                 (const Rpc__ReturnRegistersArm *message,
                  void *closure_data);
typedef void (*Rpc__Argument_Closure)
                 (const Rpc__Argument *message,
                  void *closure_data);
typedef void (*Rpc__Handshake_Closure)
                 (const Rpc__Handshake *message,
                  void *closure_data);
typedef void (*Rpc__ObjcClass_Closure)
                 (const Rpc__ObjcClass *message,
                  void *closure_data);
typedef void (*Rpc__CmdShowObject_Closure)
                 (const Rpc__CmdShowObject *message,
                  void *closure_data);
typedef void (*Rpc__ResponseShowObject_Closure)
                 (const Rpc__ResponseShowObject *message,
                  void *closure_data);
typedef void (*Rpc__CmdShowClass_Closure)
                 (const Rpc__CmdShowClass *message,
                  void *closure_data);
typedef void (*Rpc__ResponseShowClass_Closure)
                 (const Rpc__ResponseShowClass *message,
                  void *closure_data);
typedef void (*Rpc__CmdExecChunk_Closure)
                 (const Rpc__CmdExecChunk *message,
                  void *closure_data);
typedef void (*Rpc__ResponseCmdExecChunk_Closure)
                 (const Rpc__ResponseCmdExecChunk *message,
                  void *closure_data);
typedef void (*Rpc__CmdDlopen_Closure)
                 (const Rpc__CmdDlopen *message,
                  void *closure_data);
typedef void (*Rpc__ResponseDlopen_Closure)
                 (const Rpc__ResponseDlopen *message,
                  void *closure_data);
typedef void (*Rpc__CmdDlclose_Closure)
                 (const Rpc__CmdDlclose *message,
                  void *closure_data);
typedef void (*Rpc__ResponseDlclose_Closure)
                 (const Rpc__ResponseDlclose *message,
                  void *closure_data);
typedef void (*Rpc__CmdDlsym_Closure)
                 (const Rpc__CmdDlsym *message,
                  void *closure_data);
typedef void (*Rpc__ResponseDlsym_Closure)
                 (const Rpc__ResponseDlsym *message,
                  void *closure_data);
typedef void (*Rpc__CmdExec_Closure)
                 (const Rpc__CmdExec *message,
                  void *closure_data);
typedef void (*Rpc__ResponseCmdExec_Closure)
                 (const Rpc__ResponseCmdExec *message,
                  void *closure_data);
typedef void (*Rpc__CmdCall_Closure)
                 (const Rpc__CmdCall *message,
                  void *closure_data);
typedef void (*Rpc__ResponseCall_Closure)
                 (const Rpc__ResponseCall *message,
                  void *closure_data);
typedef void (*Rpc__CmdPeek_Closure)
                 (const Rpc__CmdPeek *message,
                  void *closure_data);
typedef void (*Rpc__ResponsePeek_Closure)
                 (const Rpc__ResponsePeek *message,
                  void *closure_data);
typedef void (*Rpc__CmdPoke_Closure)
                 (const Rpc__CmdPoke *message,
                  void *closure_data);
typedef void (*Rpc__ResponsePoke_Closure)
                 (const Rpc__ResponsePoke *message,
                  void *closure_data);
typedef void (*Rpc__CmdListDir_Closure)
                 (const Rpc__CmdListDir *message,
                  void *closure_data);
typedef void (*Rpc__CmdDummyBlock_Closure)
                 (const Rpc__CmdDummyBlock *message,
                  void *closure_data);
typedef void (*Rpc__ResponseDummyBlock_Closure)
                 (const Rpc__ResponseDummyBlock *message,
                  void *closure_data);
typedef void (*Rpc__CmdGetClassList_Closure)
                 (const Rpc__CmdGetClassList *message,
                  void *closure_data);
typedef void (*Rpc__ResponseGetClassList_Closure)
                 (const Rpc__ResponseGetClassList *message,
                  void *closure_data);
typedef void (*Rpc__ResponseError_Closure)
                 (const Rpc__ResponseError *message,
                  void *closure_data);
typedef void (*Rpc__ResponseListdir_Closure)
                 (const Rpc__ResponseListdir *message,
                  void *closure_data);
typedef void (*Rpc__DirEntry_Closure)
                 (const Rpc__DirEntry *message,
                  void *closure_data);
typedef void (*Rpc__DirEntryStat_Closure)
                 (const Rpc__DirEntryStat *message,
                  void *closure_data);
typedef void (*Rpc__CmdClose_Closure)
                 (const Rpc__CmdClose *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    rpc__arch__descriptor;
extern const ProtobufCMessageDescriptor rpc__command__descriptor;
extern const ProtobufCMessageDescriptor rpc__response__descriptor;
extern const ProtobufCMessageDescriptor rpc__return_registers_arm__descriptor;
extern const ProtobufCMessageDescriptor rpc__argument__descriptor;
extern const ProtobufCMessageDescriptor rpc__handshake__descriptor;
extern const ProtobufCMessageDescriptor rpc__objc_class__descriptor;
extern const ProtobufCMessageDescriptor rpc__cmd_show_object__descriptor;
extern const ProtobufCMessageDescriptor rpc__response_show_object__descriptor;
extern const ProtobufCMessageDescriptor rpc__cmd_show_class__descriptor;
extern const ProtobufCMessageDescriptor rpc__response_show_class__descriptor;
extern const ProtobufCMessageDescriptor rpc__cmd_exec_chunk__descriptor;
extern const ProtobufCMessageDescriptor rpc__response_cmd_exec_chunk__descriptor;
extern const ProtobufCMessageDescriptor rpc__cmd_dlopen__descriptor;
extern const ProtobufCMessageDescriptor rpc__response_dlopen__descriptor;
extern const ProtobufCMessageDescriptor rpc__cmd_dlclose__descriptor;
extern const ProtobufCMessageDescriptor rpc__response_dlclose__descriptor;
extern const ProtobufCMessageDescriptor rpc__cmd_dlsym__descriptor;
extern const ProtobufCMessageDescriptor rpc__response_dlsym__descriptor;
extern const ProtobufCMessageDescriptor rpc__cmd_exec__descriptor;
extern const ProtobufCMessageDescriptor rpc__response_cmd_exec__descriptor;
extern const ProtobufCMessageDescriptor rpc__cmd_call__descriptor;
extern const ProtobufCMessageDescriptor rpc__response_call__descriptor;
extern const ProtobufCMessageDescriptor rpc__cmd_peek__descriptor;
extern const ProtobufCMessageDescriptor rpc__response_peek__descriptor;
extern const ProtobufCMessageDescriptor rpc__cmd_poke__descriptor;
extern const ProtobufCMessageDescriptor rpc__response_poke__descriptor;
extern const ProtobufCMessageDescriptor rpc__cmd_list_dir__descriptor;
extern const ProtobufCMessageDescriptor rpc__cmd_dummy_block__descriptor;
extern const ProtobufCMessageDescriptor rpc__response_dummy_block__descriptor;
extern const ProtobufCMessageDescriptor rpc__cmd_get_class_list__descriptor;
extern const ProtobufCMessageDescriptor rpc__response_get_class_list__descriptor;
extern const ProtobufCMessageDescriptor rpc__response_error__descriptor;
extern const ProtobufCMessageDescriptor rpc__response_listdir__descriptor;
extern const ProtobufCMessageDescriptor rpc__dir_entry__descriptor;
extern const ProtobufCMessageDescriptor rpc__dir_entry_stat__descriptor;
extern const ProtobufCMessageDescriptor rpc__cmd_close__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_rpc_2eproto__INCLUDED */
